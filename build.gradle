buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
    }
}

plugins {
    id 'groovy'
    id 'eclipse'
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'maven-publish'
    id "com.jfrog.artifactory" version '4.5.4'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.withType(GroovyCompile) {
    options.encoding = 'UTF-8'
}

group = 'com.blackducksoftware.integration'

version = '2.3.1-SNAPSHOT'

// BuildInfo - A json payload usable by detect for information from the build
final def versionFile = new File("${projectDir}/src/main/resources/version.txt")
versionFile.delete()
versionFile << version

// the override.snaphot property should be set to true for a CI build so
// that the version is omitted from a snapshot build artifact
if (version.contains('SNAPSHOT') && "true" == project.findProperty('override.snapshot')) {
    version = 'latest-SNAPSHOT'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

apply from: 'airgap.gradle'

build {
    doLast {
        def shellScriptTemplateFile = new File("${projectDir}/src/main/resources/hub-detect-sh")
        def shellScriptContents = shellScriptTemplateFile.getText('UTF-8')
        if (!version.contains('SNAPSHOT')) {
            String latestReleaseVersion = 'DETECT_LATEST_RELEASE_VERSION=\\${DETECT_LATEST_RELEASE_VERSION:-' + "${version}" + '}\n'
            shellScriptContents = shellScriptContents.replaceFirst("DETECT_LATEST_RELEASE_VERSION=\\S*\n", latestReleaseVersion)
            shellScriptTemplateFile.delete()
            shellScriptTemplateFile << shellScriptContents
        }
        def shellScriptFile = new File("${buildDir}/hub-detect.sh")
        shellScriptFile.delete()
        shellScriptFile << shellScriptContents
        shellScriptFile.setExecutable(true)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/libs/${project.name}-${version}.jar"
            artifact (artifactName)
        }
    }
}

artifactory {
    publish {
        contextUrl = artifactoryUrl
        repository {
            repoKey = artifactoryRepo
            username = artifactoryDeployerUsername
            password = artifactoryDeployerPassword
        }
        defaults {
            publications ('mavenJava')
        }
    }
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:21.0.0'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.apache.maven.shared:maven-invoker:3.0.0'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
    compile 'com.moandjiezana.toml:toml4j:0.7.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.11'
    compile 'org.freemarker:freemarker:2.3.26-incubating'

    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.2'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.9.2'

    compile 'org.jsoup:jsoup:1.7.2'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

springBoot { mainClass = 'com.blackducksoftware.integration.hub.detect.Application' }

jacocoTestReport {
    reports { xml.enabled = true }
}

license {
    header = file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ignoreFailures = true
    includes (["**/*.groovy", "**/*.java"])
    excludes ([
        "/src/test/*.groovy",
        "src/test/*.java"
    ])
}

tasks.licenseMain.dependsOn(licenseFormatMain)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
